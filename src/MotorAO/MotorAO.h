//.$file${.::MotorAO.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: MotorAO.qm
// File:  ${.::MotorAO.h}
//
// This code has been generated by QM 5.1.0 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::MotorAO.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp" // QP/C++ framework API
#include <functional>

namespace motor {

#define VIRTUAL_FUNCTIONS \
    virtual bool pid_init(const QP::QEvt *e) = 0; \
    virtual bool pid_timeout(const QP::QEvt *e) = 0; \
    virtual bool set_speed_left(const QP::QEvt *e) = 0; \
    virtual bool set_speed_right(const QP::QEvt *e) = 0; \
    virtual bool get_wheel_speed(const QP::QEvt *e) = 0; \


enum Signals {
    TIMEOUT_SIG = QP::Q_USER_SIG, // time event timeout
    ENCODERS_SPEED_SIG,

    INITIALIZE_SIG,

    /// External
    SET_SPEED_L_SIG,
    SET_SPEED_R_SIG,

    MAX_SIG         // the last signal
};

struct Event : public QP::QEvt {
    union U {
         float f;
         void *p;
         uint32_t *u32p;
         uint64_t *u64p;
         char *str;
         uint8_t u8;
         uint32_t u32;
         uint64_t u64;
         bool b;
         std::function<void(bool)> b_cb;
         U() {};
         ~U() {};
    } u[3];

    Event(QP::QSignal const s) : QEvt(s) {};
};

};

// ask QM to declare the Blinky class ----------------------------------------
//.$declare${motor::MotorAO} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace motor {

//.${motor::MotorAO} .........................................................
class MotorAO : public QP::QActive {
private:
      VIRTUAL_FUNCTIONS;
    QP::QTimeEvt m_timeEvt= {this, TIMEOUT_SIG, 0U};
    QP::QTimeEvt encoders_timeEvt= {this, ENCODERS_SPEED_SIG, 0U};

public:
    MotorAO();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(initialize);
    Q_STATE_DECL(PIDControl);
    Q_STATE_DECL(WaitAPI);
};

} // namespace motor
//.$enddecl${motor::MotorAO} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
