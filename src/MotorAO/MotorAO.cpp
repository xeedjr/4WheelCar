//.$file${.::MotorAO.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: MotorAO.qm
// File:  ${.::MotorAO.cpp}
//
// This code has been generated by QM 5.1.0 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::MotorAO.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp" // QP/C++ framework API
#include "MotorAO.h"

using namespace QP;

// ask QM to define the Blinky class (including the state machine) -----------
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 680U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.8.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${motor::MotorAO} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace motor {

//.${motor::MotorAO} .........................................................
//.${motor::MotorAO::MotorAO} ................................................
MotorAO::MotorAO()
  : QActive(Q_STATE_CAST(&MotorAO::initial))
{}

//.${motor::MotorAO::SM} .....................................................
Q_STATE_DEF(MotorAO, initial) {
    //.${motor::MotorAO::SM::initial}
    return tran(&initialize);
}
//.${motor::MotorAO::SM::initialize} .........................................
Q_STATE_DEF(MotorAO, initialize) {
    QP::QState status_;
    switch (e->sig) {
        //.${motor::MotorAO::SM::initialize}
        case Q_ENTRY_SIG: {
            POST(Q_NEW(Event, INITIALIZE_SIG), this);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${motor::MotorAO::SM::initialize::INITIALIZE}
        case INITIALIZE_SIG: {
            status_ = tran(&WaitAPI);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${motor::MotorAO::SM::PIDControl} .........................................
Q_STATE_DEF(MotorAO, PIDControl) {
    QP::QState status_;
    switch (e->sig) {
        //.${motor::MotorAO::SM::PIDControl}
        case Q_ENTRY_SIG: {
            m_timeEvt.armX(TICKS_TIMEOUT_SEC/5, TICKS_TIMEOUT_SEC/5);
            encoders_timeEvt.armX(TICKS_TIMEOUT_SEC/10, TICKS_TIMEOUT_SEC/10);
            pid_init(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${motor::MotorAO::SM::PIDControl::TIMEOUT}
        case TIMEOUT_SIG: {
            pid_timeout(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${motor::MotorAO::SM::PIDControl::ENCODERS_SPEED}
        case ENCODERS_SPEED_SIG: {
            get_wheel_speed(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${motor::MotorAO::SM::PIDControl::WaitAPI} ................................
Q_STATE_DEF(MotorAO, WaitAPI) {
    QP::QState status_;
    switch (e->sig) {
        //.${motor::MotorAO::SM::PIDControl::WaitAPI::SET_SPEED_L}
        case SET_SPEED_L_SIG: {
            set_speed_left(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${motor::MotorAO::SM::PIDControl::WaitAPI::SET_SPEED_R}
        case SET_SPEED_R_SIG: {
            set_speed_right(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&PIDControl);
            break;
        }
    }
    return status_;
}

} // namespace motor
//.$enddef${motor::MotorAO} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
