<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.0" links="0">
 <framework name="qpcpp"/>
 <package name="sensors" stereotype="0x00" namespace="sensors">
  <class name="SensorsAO" superclass="qpcpp::QActive">
   <attribute name="VIRTUAL_FUNCTIONS" type=" " visibility="0x02" properties="0x00"/>
   <attribute name="sonic_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00">
    <code>= {this, SONCI_TIMEOUT_SIG, 0U};</code>
   </attribute>
   <operation name="SensorsAO" type="" visibility="0x00" properties="0x00">
    <code>  : QActive(Q_STATE_CAST(&amp;SensorsAO::initial))</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <initial_glyph conn="5,18,5,3,4,-1,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="initialize">
     <entry>POST(Q_NEW(Event, INITIALIZE_SIG), this);</entry>
     <tran trig="INITIALIZE" target="../../2">
      <tran_glyph conn="11,21,3,3,32,-1,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="11,12,21,17">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="WaitAPI">
     <entry>initialize(e);
/// Should be after initializing IMU works very slow
sonic_timeEvt.armX(TICKS_TIMEOUT_SEC/10, TICKS_TIMEOUT_SEC/10);</entry>
     <tran trig="IMU_DATA_READY">
      <action>imu_loop(e);</action>
      <tran_glyph conn="45,29,3,-1,24">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SONCI_TIMEOUT">
      <action>sonic_process(nullptr);</action>
      <tran_glyph conn="45,21,3,-1,23">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="45,12,31,37">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="127,84"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="SensorsAO.cpp">
   <text>#include &quot;qpcpp.hpp&quot; // QP/C++ framework API
#include &quot;SensorsAO.h&quot;

using namespace QP;

// ask QM to define the Blinky class (including the state machine) -----------
$define${sensors::SensorsAO}</text>
  </file>
  <file name="SensorsAO.h">
   <text>#include &quot;qpcpp.hpp&quot; // QP/C++ framework API
#include &lt;functional&gt;

namespace sensors {

#define VIRTUAL_FUNCTIONS \
    virtual bool initialize(const QP::QEvt *e) = 0; \
    virtual bool imu_loop(const QP::QEvt *e) = 0; \
    virtual bool sonic_process(const QP::QEvt *e) = 0; \


enum Signals {
    SONCI_TIMEOUT_SIG = QP::Q_USER_SIG, // time event timeout

    INITIALIZE_SIG,

    /// External
    IMU_DATA_READY_SIG,    

    MAX_SIG         // the last signal
};

struct Event : public QP::QEvt {
    union U {
         float f;
         void *p;
         uint32_t *u32p;
         uint64_t *u64p;
         char *str;
         uint8_t u8;
         uint32_t u32;
         uint64_t u64;
         bool b;
         U() {};
         ~U() {};
    } u[3];

    Event(QP::QSignal const s) : QEvt(s) {};
};

};

// ask QM to declare the Blinky class ----------------------------------------
$declare${sensors::SensorsAO}</text>
  </file>
 </directory>
</model>
