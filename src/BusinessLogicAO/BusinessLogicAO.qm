<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.0" links="0">
 <framework name="qpcpp"/>
 <package name="business_logic" stereotype="0x00" namespace="business_logic">
  <class name="BusinessLogicBase" superclass="qpcpp::QActive">
   <operation name="setImuHandler" type="void" visibility="0x01" properties="0x04">
    <specifiers>= 0</specifiers>
    <documentation>Sets IMU data</documentation>
    <parameter name="e" type="QP::QEvt const *"/>
   </operation>
   <operation name="setEncodersHandler" type="void" visibility="0x01" properties="0x04">
    <specifiers>= 0</specifiers>
    <parameter name="e" type="QP::QEvt const *"/>
   </operation>
   <operation name="commandHandler" type="void" visibility="0x01" properties="0x04">
    <specifiers>= 0</specifiers>
   </operation>
   <operation name="BusinessLogicBase" type="" visibility="0x00" properties="0x00">
    <code>  : QActive(Q_STATE_CAST(&amp;BusinessLogicBase::initial))</code>
   </operation>
   <operation name="setUSHandler" type="void" visibility="0x01" properties="0x04">
    <specifiers>= 0</specifiers>
    <documentation>Sets US data</documentation>
    <parameter name="e" type="QP::QEvt const *"/>
   </operation>
   <operation name="setWheelsPosHandler" type="void" visibility="0x01" properties="0x04">
    <specifiers>= 0</specifiers>
    <documentation>Sets WheelsPos data</documentation>
    <parameter name="e" type="QP::QEvt const *"/>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <initial_glyph conn="7,3,5,0,13,6">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="idle">
     <entry brief="init_orion"/>
     <tran trig="BL_SET_IMU">
      <action>this-&gt;setImuHandler(e);</action>
      <tran_glyph conn="31,15,1,-1,29">
       <action box="0,-2,20,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BL_SET_ENCODERS">
      <action>this-&gt;setEncodersHandler(e);</action>
      <tran_glyph conn="31,19,1,-1,25">
       <action box="0,-2,20,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BL_COMMAND">
      <action>this-&gt;commandHandler();</action>
      <tran_glyph conn="31,23,1,-1,26">
       <action box="0,-2,18,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BL_SET_US">
      <action>setUSHandler(e);</action>
      <tran_glyph conn="31,26,1,-1,25">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BL_SET_WHEEL_POS">
      <action>setWheelsPosHandler(e);</action>
      <tran_glyph conn="31,28,1,-1,25">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="14,9,17,34">
      <entry box="1,2,12,2"/>
     </state_glyph>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="BusinessLogicBase.h">
   <text>#pragma once

#include &quot;qpcpp.hpp&quot; // QP/C++ framework API

namespace business_logic {

enum Signal
{
   BL_SET_IMU_SIG = QP::Q_USER_SIG,
   BL_SET_ENCODERS_SIG,
   BL_COMMAND_SIG,
   BL_SET_US_SIG,
   BL_SET_WHEEL_POS_SIG
};

};

$declare${business_logic::BusinessLogicBase}</text>
  </file>
  <file name="BusinessLogicBase.cpp">
   <text>#include &quot;qpcpp.hpp&quot; // QP/C++ framework API
#include &quot;BusinessLogicBase.h&quot;

using namespace QP;

$define${business_logic::BusinessLogicBase}</text>
  </file>
 </directory>
</model>
