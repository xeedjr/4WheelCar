//.$file${.::BusinessLogicBase.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: BusinessLogicAO.qm
// File:  ${.::BusinessLogicBase.cpp}
//
// This code has been generated by QM 5.1.0 <www.state-machine.com/qm/>.
// DO NOT EDIT SECTIONS BETWEEN THE COMMENTS "$...vvv".."$end...^^^".
// All your changes in these sections will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::BusinessLogicBase.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#include "BusinessLogicBase.h"

//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 680U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.8.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${application::BusinessLogicBase} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace business_logic {

//.${application::BusinessLogicBase} .........................................
//.${application::BusinessLogicBas~::BusinessLogicBase} ......................
BusinessLogicBase::BusinessLogicBase()
  : QActive(Q_STATE_CAST(&BusinessLogicBase::initial))
{}

//.${application::BusinessLogicBas~::SM} .....................................
Q_STATE_DEF(BusinessLogicBase, initial) {
    //.${application::BusinessLogicBas~::SM::initial}
    return tran(&idle);
}
//.${application::BusinessLogicBas~::SM::idle} ...............................
Q_STATE_DEF(BusinessLogicBase, idle) {
    QP::QState status_;
    switch (e->sig) {
        //.${application::BusinessLogicBas~::SM::idle::BL_SET_IMU}
        case BL_SET_IMU_SIG: {
            this->setImuHandler(Q_EVT_CAST(Event));
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${application::BusinessLogicBas~::SM::idle::BL_SET_ENCODERS}
        case BL_SET_ENCODERS_SIG: {
            this->setEncodersHandler(Q_EVT_CAST(Event));
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${application::BusinessLogicBas~::SM::idle::BL_COMMAND}
        case BL_COMMAND_SIG: {
            this->commandHandler();
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

} // namespace business_logic
//.$enddef${application::BusinessLogicBase} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
