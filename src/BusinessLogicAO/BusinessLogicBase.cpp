//.$file${.::BusinessLogicBase.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: BusinessLogicAO.qm
// File:  ${.::BusinessLogicBase.cpp}
//
// This code has been generated by QM 5.1.0 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::BusinessLogicBase.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp" // QP/C++ framework API
#include "BusinessLogicBase.h"

using namespace QP;

//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 680U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.8.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${business_logic::BusinessLogicBase} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace business_logic {

//.${business_logic::BusinessLogicBase} ......................................
//.${business_logic::BusinessLogicBas~::BusinessLogicBase} ...................
BusinessLogicBase::BusinessLogicBase()
  : QActive(Q_STATE_CAST(&BusinessLogicBase::initial))
{}

//.${business_logic::BusinessLogicBas~::SM} ..................................
Q_STATE_DEF(BusinessLogicBase, initial) {
    //.${business_logic::BusinessLogicBas~::SM::initial}
    return tran(&idle);
}
//.${business_logic::BusinessLogicBas~::SM::idle} ............................
Q_STATE_DEF(BusinessLogicBase, idle) {
    QP::QState status_;
    switch (e->sig) {
        //.${business_logic::BusinessLogicBas~::SM::idle}
        case Q_ENTRY_SIG: {
            heartBeat_timeEvt.armX(TICKS_TIMEOUT_SEC*5, TICKS_TIMEOUT_SEC*5);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${business_logic::BusinessLogicBas~::SM::idle::BL_SET_IMU}
        case BL_SET_IMU_SIG: {
            this->setImuHandler(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${business_logic::BusinessLogicBas~::SM::idle::BL_SET_ENCODERS}
        case BL_SET_ENCODERS_SIG: {
            this->setEncodersHandler(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${business_logic::BusinessLogicBas~::SM::idle::BL_COMMAND}
        case BL_COMMAND_SIG: {
            this->commandHandler();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${business_logic::BusinessLogicBas~::SM::idle::BL_SET_US}
        case BL_SET_US_SIG: {
            setUSHandler(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${business_logic::BusinessLogicBas~::SM::idle::BL_SET_WHEEL_POS}
        case BL_SET_WHEEL_POS_SIG: {
            setWheelsPosHandler(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${business_logic::BusinessLogicBas~::SM::idle::BL_SET_WHEEL_SPEED}
        case BL_SET_WHEEL_SPEED_SIG: {
            setWheelsSpeedHandler(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${business_logic::BusinessLogicBas~::SM::idle::BL_HART_BEAT}
        case BL_HART_BEAT_SIG: {
            heartBeat(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

} // namespace business_logic
//.$enddef${business_logic::BusinessLogicBase} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
