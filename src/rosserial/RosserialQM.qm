<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.0" links="0">
 <framework name="qpcpp"/>
 <package name="ros_serial" stereotype="0x00" namespace="ros_serial">
  <class name="RosserialQM" superclass="qpcpp::QActive">
   <attribute name="VIRTUAL_FUNCTIONS" type=" " visibility="0x02" properties="0x00"/>
   <attribute name="spin_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00">
    <code>{this, SPIN_SIG, 0U};</code>
   </attribute>
   <attribute name="timer1_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00">
    <code>{this, TIMER1_SIG, 0U};</code>
   </attribute>
   <operation name="RosserialQM" type="" visibility="0x00" properties="0x00">
    <code>  : QActive(Q_STATE_CAST(&amp;RosserialQM::initial))</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <initial_glyph conn="5,18,5,3,4,-1,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="initialize">
     <entry>POST(Q_NEW(QP::QEvt, INITIALIZE_SIG), this);</entry>
     <tran trig="INITIALIZE" target="../../2">
      <action>initialize(e);</action>
      <tran_glyph conn="11,21,3,3,34">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="11,12,21,17">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="Ready">
     <entry>spin_timeEvt.armX(TICKS_TIMEOUT_SEC/5, TICKS_TIMEOUT_SEC/5);
timer1_timeEvt.armX(TICKS_TIMEOUT_SEC, TICKS_TIMEOUT_SEC);</entry>
     <exit>spin_timeEvt.disarm();
timer1_timeEvt.disarm();</exit>
     <tran trig="RECEIVED_BYTE">
      <action>process_in_data(e);</action>
      <tran_glyph conn="45,24,3,-1,18">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TIMER1">
      <action>timer1(e);</action>
      <tran_glyph conn="45,32,3,-1,19">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SONAR_PUBLISH">
      <action>sonar_pubV(e);</action>
      <tran_glyph conn="45,38,3,-1,19">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="MOTOR_PUBLISH">
      <action>motor_pubV(e);</action>
      <tran_glyph conn="45,42,3,-1,19">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="IMU_PUBLISH">
      <action>imu_pubV(e);</action>
      <tran_glyph conn="45,46,3,-1,19">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SPIN">
      <action>spin_data(e);</action>
      <tran_glyph conn="45,27,3,-1,18">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="45,13,31,49">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="127,84"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="RosserialQM.cpp">
   <text>#include &quot;qpcpp.hpp&quot; // QP/C++ framework API
#include &quot;RosserialQM.h&quot;

using namespace QP;

// ask QM to define the Blinky class (including the state machine) -----------
$define${ros_serial::RosserialQM}</text>
  </file>
  <file name="RosserialQM.h">
   <text>#include &quot;qpcpp.hpp&quot; // QP/C++ framework API
#include &lt;functional&gt;

namespace ros_serial {

#define VIRTUAL_FUNCTIONS \
    virtual bool initialize(const QP::QEvt *e) = 0; \
    virtual bool process_in_data(const QP::QEvt *e) = 0; \
    virtual bool timer1(const QP::QEvt *e) = 0; \
    virtual bool sonar_pubV(const QP::QEvt *e) = 0; \
    virtual bool motor_pubV(const QP::QEvt *e) = 0; \
    virtual bool imu_pubV(const QP::QEvt *e) = 0; \
    virtual bool spin_data(const QP::QEvt *e) = 0; \


enum Signals {
    TIMEOUT_SIG = QP::Q_USER_SIG, // time event timeout
    TIMER1_SIG,
    SPIN_SIG,

    INITIALIZE_SIG,

    /// External
    RECEIVED_BYTE_SIG,

    SONAR_PUBLISH_SIG,
    IMU_PUBLISH_SIG,
    MOTOR_PUBLISH_SIG,


    MAX_SIG         // the last signal
};

};

// ask QM to declare the Blinky class ----------------------------------------
$declare${ros_serial::RosserialQM}</text>
  </file>
 </directory>
</model>
