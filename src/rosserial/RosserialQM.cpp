//.$file${.::RosserialQM.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: RosserialQM.qm
// File:  ${.::RosserialQM.cpp}
//
// This code has been generated by QM 5.1.0 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::RosserialQM.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp" // QP/C++ framework API
#include "RosserialQM.h"

using namespace QP;

// ask QM to define the Blinky class (including the state machine) -----------
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 680U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.8.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${ros_serial::RosserialQM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace ros_serial {

//.${ros_serial::RosserialQM} ................................................
//.${ros_serial::RosserialQM::RosserialQM} ...................................
RosserialQM::RosserialQM()
  : QActive(Q_STATE_CAST(&RosserialQM::initial))
{}

//.${ros_serial::RosserialQM::SM} ............................................
Q_STATE_DEF(RosserialQM, initial) {
    //.${ros_serial::RosserialQM::SM::initial}
    return tran(&initialize);
}
//.${ros_serial::RosserialQM::SM::initialize} ................................
Q_STATE_DEF(RosserialQM, initialize) {
    QP::QState status_;
    switch (e->sig) {
        //.${ros_serial::RosserialQM::SM::initialize}
        case Q_ENTRY_SIG: {
            POST(Q_NEW(QP::QEvt, INITIALIZE_SIG), this);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${ros_serial::RosserialQM::SM::initialize::INITIALIZE}
        case INITIALIZE_SIG: {
            initialize(e);
            status_ = tran(&Ready);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${ros_serial::RosserialQM::SM::Ready} .....................................
Q_STATE_DEF(RosserialQM, Ready) {
    QP::QState status_;
    switch (e->sig) {
        //.${ros_serial::RosserialQM::SM::Ready}
        case Q_ENTRY_SIG: {
            spin_timeEvt.armX(TICKS_TIMEOUT_SEC/5, TICKS_TIMEOUT_SEC/5);
            timer1_timeEvt.armX(TICKS_TIMEOUT_SEC, TICKS_TIMEOUT_SEC);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${ros_serial::RosserialQM::SM::Ready}
        case Q_EXIT_SIG: {
            spin_timeEvt.disarm();
            timer1_timeEvt.disarm();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${ros_serial::RosserialQM::SM::Ready::RECEIVED_BYTE}
        case RECEIVED_BYTE_SIG: {
            process_in_data(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${ros_serial::RosserialQM::SM::Ready::TIMER1}
        case TIMER1_SIG: {
            timer1(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${ros_serial::RosserialQM::SM::Ready::SONAR_PUBLISH}
        case SONAR_PUBLISH_SIG: {
            sonar_pubV(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${ros_serial::RosserialQM::SM::Ready::MOTOR_PUBLISH}
        case MOTOR_PUBLISH_SIG: {
            motor_pubV(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${ros_serial::RosserialQM::SM::Ready::IMU_PUBLISH}
        case IMU_PUBLISH_SIG: {
            imu_pubV(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${ros_serial::RosserialQM::SM::Ready::SPIN}
        case SPIN_SIG: {
            spin_data(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

} // namespace ros_serial
//.$enddef${ros_serial::RosserialQM} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
